library(devtools)
install_github("cjvanlissa/metaforest")
install_github("wviechtb/metafor")
source("packages.R")

dat <- read.csv("AGB_effects2019.csv",na.strings=c("",NA))
dat <- dat[complete.cases(dat$id),]
dat$obs <- 1:nrow(dat)
dat$MoistureIndex <- dat$MAP2 / dat$PETsplash2
dat$Gaussen <- dat$MAP2 / (2*dat$MAT)
levels(dat$Biome) <- list("Bo" = "Boreal_Forest","Cr"="Cropland", "Gr"="Grassland", "Sh"="Shrubland",
                          "Te"="Temperate_Forest","Tr"="Tropical_Forest")

# Record which variables have a lot of missingness, so that we might later be
# skeptical about any findings involving those variables

moderators <- c(# "field" information specific for the individual studies
  "Myc", "CNr", "P", "TotN", "pH", # Nutritional moderators. Myc = mycorrhizal type, CNr= soil C:N ratio,
  "Biome", "Fumigation.type", "Age", "Nyears", "deltaco2", # Experimental moderators
  "MAT", "MAP2", # Climatic moderators. MAT=temperature, MAP2=precipitation
  # EXTRACTED information from global datasets at ~1km resolution
  "Clay", "CEC", "ENa", "Ktot", # Nutritional moderators
  "PamountOlsen", "PamountMehlich", "Pretention", "PTot", "Ptot_ORNL", "Plabile", "Porg", "Poccluded", "Psecondary", "Papatite", # Alternative approaches to account for phosphorus (P) availability. Lots of NAs in these products
  "AGTcru0", "AGTcru5", "GDD", "SolRad", "Twarm" , "Gaussen", "MoistureIndex", # Climatic moderators
  "Alpha", "PETcru", "AETsplash", "PETsplash2", "waterlim", "moisture") # Climatic moderators  

df <- dat[, moderators]
missingness <- sapply(df, function(x) sum(is.na(x))/length(x))
plot(density(missingness))
many_missings <- names(dat)[missingness > .6]
many_missings

# Any factor variables with missingness? No.
names(df)[sapply(df, function(x) class(x) %in% c("factor", "character")) & missingness > 0]

info <- dplyr::select(dat,obs,id:SPECIES,N, amb.rep:Lon, Myc, Biome, Fumigation.type, MAPraw)

continuous_vars <- dplyr::select(dat,obs,Nyears,MAT:TotN,P,CEC,Pretention,PamountOlsen:PTot,
                                 ENa:Clay,AGTcru0:PETcru,AETsplash:MWD,MAP2,Age,deltaco2, MoistureIndex, Gaussen) %>% 
  mutate_if(~ is.numeric(.) | is.integer(.), funs(replace(., .<0, NA))) %>% # -999 or similar negative values are really NAs
  missRanger(num.trees = 500)


dat <- left_join(info,continuous_vars)


# Factor analyses ---------------------------------------------------------

# Dimension reduction on THEORETICAL grounds; there can be only one true soil phosphorous level
# Hence, extract only one component.
p.pca <- principal(dat[,c("PamountOlsen", "PamountMehlich", "Pretention", "PTot", "Ptot_ORNL", "Plabile", "Porg", "Poccluded", "Psecondary", "Papatite")], nfactors = 1)
dat$P_pca <- p.pca$scores[,1]

# Turns out these nutritional variables do not correlate highly
fa.parallel(dat[,c("Clay", "CEC", "ENa", "Ktot")], use = "pairwise.complete.obs")
principal(dat[,c("Clay", "CEC", "ENa", "Ktot")], nfactors = 2)

# Dimension reduction on semi-theoretical grouds; these are all climatic moderators
fa.parallel(dat[,c("AGTcru0", "AGTcru5", "GDD", "SolRad", "Twarm", "Alpha", "PETcru", "AETsplash", "PETsplash2", "waterlim", "moisture","Gaussen", "MoistureIndex")], use = "pairwise.complete.obs")
# Parallel analysis suggests two components
clima.pca <- principal(dat[,c("AGTcru0", "AGTcru5", "GDD", "SolRad", "Twarm", "Alpha", "PETcru", "AETsplash", "PETsplash2", "waterlim", "moisture", "Gaussen", "MoistureIndex")], nfactors = 2)
dat$clima_pca1 <- clima.pca$scores[,1]
dat$clima_pca2 <- clima.pca$scores[,2]

saveRDS(dat, "imputed_dat.RData")

#######################
### MODEL SELECTION ###
#######################

# Meta-Forest
set.seed(36326)
# Check how many iterations metaforest needs to converge
check_conv <- MetaForest(as.formula(paste0("yi~", paste(moderators, collapse = "+"))),
                         data = dat,
                         whichweights = "random",
                         num.trees = 15000)
saveRDS(check_conv," check_conv.RData")
# Plot convergence trajectory
plot(check_conv)

# Perform recursive preselection

preselected <- preselect(as.formula(paste0("yi~", paste(moderators, collapse = "+"))), data = dat,
                         whichweights = "random",
                         num.trees = 5000,
                         replications = 100,
                         algorithm = "bootstrap")
saveRDS(preselected, "preselected.RData")
cairo_pdf("figures/preselected.pdf", width = 8.27,height = 11.69)
plot(preselected)
dev.off()
# Tune the metaforest analysis

# Set up 10-fold grouped (=clustered) CV
cv_folds <- trainControl(method = "cv", 10)

# Set up a tuning grid for the three tuning parameters of MetaForest
tuning_grid <- expand.grid(whichweights = c("random", "fixed", "unif"),
                           mtry = 2:6,
                           min.node.size = 2:6)

# Select only moderators and vi
X <- dat[, c("vi", select_vars(preselected, cutoff = .5))]

# Train the model
mf_cv <- train(y = dat$yi,
               x = X,
               method = ModelInfo_mf(),
               trControl = cv_folds,
               tuneGrid = tuning_grid,
               num.trees = 5000)

# Check result
mf_cv
#The final values used for the model were whichweights = fixed, mtry = 5 and min.node.size = 6.
saveRDS(mf_cv, "mf_cv.RData")

# Cross-validated R2 of the final model:
mf_cv$results[which.min(mf_cv$results$RMSE), ]$Rsquared
# Extract final model
final <- mf_cv$finalModel
# Plot convergence
plot(final)
# OOB  R2 of the final model:
final$forest$r.squared

# Plot variable importance
cairo_pdf("figures/VI.pdf", width = 8.27)
VarImpPlot(final)
dev.off()

cairo_pdf("figures/PartialDependence.pdf", width = 8.27)
PartialDependence(final, vars = names(final$forest$variable.importance)[order(final$forest$variable.importance, decreasing = TRUE)])
dev.off()

# Final RMA model ---------------------------------------------------------

# Starting with only the 10 best predictors 
rma_mods <- names(final$forest$variable.importance)[order(final$forest$variable.importance, decreasing = TRUE)][c(1:10)]
rma_dat <- dat[,c("yi","vi", rma_mods)]

# Use reciprocal transformations for variables that show ceiling/floor effects
rma_dat$CNr_recip <- 1/rma_dat$CNr
rma_dat$P_recip <- 1/rma_dat$P
rma_dat$P_pca_recip <- 1/rma_dat$P_pca
rma_dat$MAP_recip <- 1/rma_dat$MAP2
rma_dat$MAT_recip <- 1/rma_dat$MAT

Y <- rma_dat$yi
V <- rma_dat$vi

data <- rma_dat[, c("Myc", "CNr_recip", "P_recip", "Biome","ENa", "MAP_recip", "P_pca_recip", "MAT_recip", "Ktot", "Fumigation.type")]
continuous_vars <- sapply(data, class) %in% c("numeric", "integer")
means <- colMeans(data[, continuous_vars])
data[, continuous_vars] <- sweep(data[, continuous_vars], 2, means, `-`)
factor_vars <- sapply(data, class) %in% c("factor", "character")

# Create informative contrasts for factor variables
# This is also required to ensure that the intercept of the model will be the
# mean value for the entire dataset, and not the mean value for the reference 
# category of the factor variables
contrasts(data$Biome) <- cbind(
  BoCrGrSh_STeTr = c(-1, -1, -1, -1,  2,  2),
  Te_Tr          = c( 0,  0,  0,  0, -1,  1),
  Bo_Cr          = c(-1,  1,  0,  0,  0,  0),
  Bo_Gr          = c(-1,  0,  1,  0,  0,  0),
  Bo_Sh          = c(-1,  0,  0,  1,  0,  0))

# Drop unused levels, otherwise rma() goes haywire
data$Fumigation.type <- droplevels(data$Fumigation.type)
contrasts(data$Fumigation.type) <- cbind(
  FaceG_OTC = c(-1, -1,  2),
  Face_G    = c(-1,  1,  0))

contrasts(data$Myc) <- cbind(
  AM_ECM = c(-1, 1))

# Create full model, with all important moderators, and including theoretically 
# relevant interactions between Myc and CNr / P
X_mods <- model.matrix(~ Myc + Myc*CNr_recip + Myc*P_recip + Myc*P_pca_recip + Biome + ENa + MAP_recip + MAT_recip + Ktot + Fumigation.type, data)[,-1]

# Estimate the model
rma_model <- rma(yi = Y, vi = V, mods = X_mods, control=list(stepadj=0.5))
rma_model
anova(rma_model, btt=6:10) # Biome
anova(rma_model, btt=15:16) # Fumigation.type
model10 <- round(coef(summary(rma_model)),4)
write.csv(model10,"model_results_10pred.csv")

# Prune the model once
X_mods_pruned <- model.matrix(~ Myc + Myc*CNr_recip + Myc*P_recip + Fumigation.type, data)[,-1]
rma_pruned_cv <- train(y = Y,
                       x = X_mods_pruned,
                       weights = V,
                       control=list(stepadj=.5),
                       method = ModelInfo_rma(),
                       trControl = cv_folds
)

# Cross-validated R2
rma_pruned_cv$results$Rsquared

# Inspect coefficients
final_rma <- rma_pruned_cv$finalModel
final_rma

# Alternatively, try all posible combinations of models with the best moderators and their interactions to find the bets AIC model
res2 <- glmulti(dat$yi ~ Myc + CNr_recip + P_recip + Biome + MAP2 + MAT + Fumigation.type, 
                    method = "g",
                    crit="aicc",
                    #report = FALSE,
                    plotty = FALSE,
                    maxsize=5, 
                    popsize = 10,
                    mutrate = 0.025,
                    sexrate = 0.01,
                    imm = 0.33,
                    confsetsize = 20,
                    deltaM = 0.5,
                    deltaB = 0,
                    marginality = TRUE,
                    data=rma_dat, level=2, fitfunction=rma.glmulti)
cairo_pdf("figures/AICcRVI.pdf", width = 8.27)
plot(res2, type="s")
dev.off()
imp <- data.frame(predictor=names(extractRVI(res2)), importance=extractRVI(res.all2))
write.csv(imp, "importance.csv")

# FINAL MODEL
final_aicc <- res2@objects[[1]]
